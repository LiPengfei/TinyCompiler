!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$	.\tags	/^END	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
$	.\tags	/^ERROR	.\\globals.h	\/^    ENDFILE, ERROR,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
$	.\tags	/^NUM	.\\globals.h	\/^    ID, NUM,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
$	.\tags	/^THEN	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
$	.\tags	/^UNTIL	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
$	.\tags	/^WRITE	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
$	.\tags	/^treeNode	.\\globals.h	\/^typedef struct treeNode {$\/;"	s$/;"	m	struct:treeNode	file:	access:public
$	.\tags	/^treeNode::__anon6::stmt	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	m	struct:treeNode	file:	access:public
ASSIGN	.\globals.h	/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$/;"	e	enum:__anon1
AssignK	.\globals.h	/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$/;"	e	enum:__anon3
AssignK	.\tags	/^ReadK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	e	enum:__anon13	file:
AssignK	.\tags	/^RepeatK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	e	enum:__anon12	file:
AssignK	.\tags	/^StmtKind	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	t	typeref:enum:__anon3$/;"	e	enum:__anon14	file:
BUFLEN	.\scan.c	16;"	d	file:
Boolean	.\globals.h	/^typedef enum {Void, Interger, Boolean} ExpType;$/;"	e	enum:__anon5
Boolean	.\tags	/^ExpType	.\\globals.h	\/^typedef enum {Void, Interger, Boolean} ExpType;$\/;"	t	typeref:enum:__anon5$/;"	e	enum:__anon18	file:
Boolean	.\tags	/^Interger	.\\globals.h	\/^typedef enum {Void, Interger, Boolean} ExpType;$\/;"	e	enum:__anon5$/;"	e	enum:__anon17	file:
ConstK	.\globals.h	/^typedef enum {OpK, ConstK, IdK} ExpKind;$/;"	e	enum:__anon4
ConstK	.\tags	/^ConstK	.\\globals.h	\/^typedef enum {OpK, ConstK, IdK} ExpKind;$\/;"	e	enum:__anon4$/;"	e	enum:__anon15	file:
ConstK	.\tags	/^ExpKind	.\\globals.h	\/^typedef enum {OpK, ConstK, IdK} ExpKind;$\/;"	t	typeref:enum:__anon4$/;"	e	enum:__anon16	file:
DONE	.\scan.c	/^    DONE,$/;"	e	enum:__anon8	file:
ELSE	.\globals.h	/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
ELSE	.\tags	/^END	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
ELSE	.\tags	/^THEN	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
ELSE	.\tags	/^UNTIL	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
ELSE	.\tags	/^WRITE	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
END	.\globals.h	/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
END	.\tags	/^END	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
END	.\tags	/^THEN	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
END	.\tags	/^UNTIL	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
END	.\tags	/^WRITE	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
ENDFILE	.\globals.h	/^    ENDFILE, ERROR,$/;"	e	enum:__anon1
EQ	.\globals.h	/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$/;"	e	enum:__anon1
EQ	.\tags	/^EQ	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
EQ	.\tags	/^LPAREN	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
EQ	.\tags	/^PLUS	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
EQ	.\tags	/^SEMI	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
EQ	.\tags	/^TIMES	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
ERROR	.\globals.h	/^    ENDFILE, ERROR,$/;"	e	enum:__anon1
ERROR	.\tags	/^ERROR	.\\globals.h	\/^    ENDFILE, ERROR,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
ExpK	.\globals.h	/^typedef enum { StmtK, ExpK } NodeKind;$/;"	e	enum:__anon2
ExpK	.\tags	/^NodeKind	.\\globals.h	\/^typedef enum { StmtK, ExpK } NodeKind;$\/;"	t	typeref:enum:__anon2$/;"	e	enum:__anon11	file:
ExpK	.\tags	/^StmtK	.\\globals.h	\/^typedef enum { StmtK, ExpK } NodeKind;$\/;"	e	enum:__anon2$/;"	e	enum:__anon10	file:
ExpKind	.\globals.h	/^typedef enum {OpK, ConstK, IdK} ExpKind;$/;"	t	typeref:enum:__anon4
ExpKind	.\tags	/^ConstK	.\\globals.h	\/^typedef enum {OpK, ConstK, IdK} ExpKind;$\/;"	e	enum:__anon4$/;"	t	typeref:enum:__anon15	file:
ExpKind	.\tags	/^ExpKind	.\\globals.h	\/^typedef enum {OpK, ConstK, IdK} ExpKind;$\/;"	t	typeref:enum:__anon4$/;"	t	typeref:enum:__anon16	file:
ExpType	.\globals.h	/^typedef enum {Void, Interger, Boolean} ExpType;$/;"	t	typeref:enum:__anon5
ExpType	.\tags	/^ExpType	.\\globals.h	\/^typedef enum {Void, Interger, Boolean} ExpType;$\/;"	t	typeref:enum:__anon5$/;"	t	typeref:enum:__anon18	file:
ExpType	.\tags	/^Interger	.\\globals.h	\/^typedef enum {Void, Interger, Boolean} ExpType;$\/;"	e	enum:__anon5$/;"	t	typeref:enum:__anon17	file:
FALSE	.\globals.h	10;"	d
ID	.\globals.h	/^    ID, NUM,$/;"	e	enum:__anon1
IF	.\globals.h	/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
INASSIGN	.\scan.c	/^    INASSIGN,$/;"	e	enum:__anon8	file:
INCOMMENT	.\scan.c	/^    INCOMMENT,$/;"	e	enum:__anon8	file:
INID	.\scan.c	/^    INID,$/;"	e	enum:__anon8	file:
INNUM	.\scan.c	/^    INNUM,$/;"	e	enum:__anon8	file:
IdK	.\globals.h	/^typedef enum {OpK, ConstK, IdK} ExpKind;$/;"	e	enum:__anon4
IdK	.\tags	/^ConstK	.\\globals.h	\/^typedef enum {OpK, ConstK, IdK} ExpKind;$\/;"	e	enum:__anon4$/;"	e	enum:__anon15	file:
IdK	.\tags	/^ExpKind	.\\globals.h	\/^typedef enum {OpK, ConstK, IdK} ExpKind;$\/;"	t	typeref:enum:__anon4$/;"	e	enum:__anon16	file:
Interger	.\globals.h	/^typedef enum {Void, Interger, Boolean} ExpType;$/;"	e	enum:__anon5
Interger	.\tags	/^ExpType	.\\globals.h	\/^typedef enum {Void, Interger, Boolean} ExpType;$\/;"	t	typeref:enum:__anon5$/;"	e	enum:__anon18	file:
Interger	.\tags	/^Interger	.\\globals.h	\/^typedef enum {Void, Interger, Boolean} ExpType;$\/;"	e	enum:__anon5$/;"	e	enum:__anon17	file:
LPAREN	.\globals.h	/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$/;"	e	enum:__anon1
LPAREN	.\tags	/^EQ	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
LPAREN	.\tags	/^LPAREN	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
LPAREN	.\tags	/^PLUS	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
LPAREN	.\tags	/^SEMI	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
LPAREN	.\tags	/^TIMES	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
LT	.\globals.h	/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$/;"	e	enum:__anon1
LT	.\tags	/^EQ	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
LT	.\tags	/^LPAREN	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
LT	.\tags	/^PLUS	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
LT	.\tags	/^SEMI	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
LT	.\tags	/^TIMES	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
MAXCHILDREN	.\globals.h	42;"	d
MAXRESERVER	.\globals.h	17;"	d
MAXTOKENLEN	.\scan.h	4;"	d
MINUS	.\globals.h	/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$/;"	e	enum:__anon1
MINUS	.\tags	/^EQ	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
MINUS	.\tags	/^LPAREN	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
MINUS	.\tags	/^PLUS	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
MINUS	.\tags	/^SEMI	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
MINUS	.\tags	/^TIMES	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
NUM	.\globals.h	/^    ID, NUM,$/;"	e	enum:__anon1
NUM	.\tags	/^NUM	.\\globals.h	\/^    ID, NUM,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
NodeKind	.\globals.h	/^typedef enum { StmtK, ExpK } NodeKind;$/;"	t	typeref:enum:__anon2
NodeKind	.\tags	/^NodeKind	.\\globals.h	\/^typedef enum { StmtK, ExpK } NodeKind;$\/;"	t	typeref:enum:__anon2$/;"	t	typeref:enum:__anon11	file:
NodeKind	.\tags	/^StmtK	.\\globals.h	\/^typedef enum { StmtK, ExpK } NodeKind;$\/;"	e	enum:__anon2$/;"	t	typeref:enum:__anon10	file:
OVER	.\globals.h	/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$/;"	e	enum:__anon1
OVER	.\tags	/^EQ	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
OVER	.\tags	/^LPAREN	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
OVER	.\tags	/^PLUS	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
OVER	.\tags	/^SEMI	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
OVER	.\tags	/^TIMES	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
OpK	.\globals.h	/^typedef enum {OpK, ConstK, IdK} ExpKind;$/;"	e	enum:__anon4
OpK	.\tags	/^ConstK	.\\globals.h	\/^typedef enum {OpK, ConstK, IdK} ExpKind;$\/;"	e	enum:__anon4$/;"	e	enum:__anon15	file:
OpK	.\tags	/^ExpKind	.\\globals.h	\/^typedef enum {OpK, ConstK, IdK} ExpKind;$\/;"	t	typeref:enum:__anon4$/;"	e	enum:__anon16	file:
PLUS	.\globals.h	/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$/;"	e	enum:__anon1
PLUS	.\tags	/^EQ	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
PLUS	.\tags	/^LPAREN	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
PLUS	.\tags	/^PLUS	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
PLUS	.\tags	/^SEMI	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
PLUS	.\tags	/^TIMES	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
READ	.\globals.h	/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
READ	.\tags	/^END	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
READ	.\tags	/^THEN	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
READ	.\tags	/^UNTIL	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
READ	.\tags	/^WRITE	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
REPEAT	.\globals.h	/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
REPEAT	.\tags	/^END	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
REPEAT	.\tags	/^THEN	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
REPEAT	.\tags	/^UNTIL	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
REPEAT	.\tags	/^WRITE	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
RPAREM	.\globals.h	/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$/;"	e	enum:__anon1
RPAREM	.\tags	/^EQ	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
RPAREM	.\tags	/^LPAREN	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
RPAREM	.\tags	/^PLUS	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
RPAREM	.\tags	/^SEMI	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
RPAREM	.\tags	/^TIMES	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
ReadK	.\globals.h	/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$/;"	e	enum:__anon3
ReadK	.\tags	/^ReadK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	e	enum:__anon13	file:
ReadK	.\tags	/^RepeatK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	e	enum:__anon12	file:
ReadK	.\tags	/^StmtKind	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	t	typeref:enum:__anon3$/;"	e	enum:__anon14	file:
RepeatK	.\globals.h	/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$/;"	e	enum:__anon3
RepeatK	.\tags	/^ReadK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	e	enum:__anon13	file:
RepeatK	.\tags	/^RepeatK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	e	enum:__anon12	file:
RepeatK	.\tags	/^StmtKind	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	t	typeref:enum:__anon3$/;"	e	enum:__anon14	file:
SEMI	.\globals.h	/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$/;"	e	enum:__anon1
SEMI$	.\tags	/^EQ	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
SEMI$	.\tags	/^LPAREN	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
SEMI$	.\tags	/^PLUS	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
SEMI$	.\tags	/^SEMI	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
SEMI$	.\tags	/^TIMES	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
START	.\scan.c	/^    START,$/;"	e	enum:__anon8	file:
StateType	.\scan.c	/^} StateType;$/;"	t	typeref:enum:__anon8	file:
StmtK	.\globals.h	/^typedef enum { StmtK, ExpK } NodeKind;$/;"	e	enum:__anon2
StmtK	.\tags	/^NodeKind	.\\globals.h	\/^typedef enum { StmtK, ExpK } NodeKind;$\/;"	t	typeref:enum:__anon2$/;"	e	enum:__anon11	file:
StmtK	.\tags	/^StmtK	.\\globals.h	\/^typedef enum { StmtK, ExpK } NodeKind;$\/;"	e	enum:__anon2$/;"	e	enum:__anon10	file:
StmtKind	.\globals.h	/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$/;"	t	typeref:enum:__anon3
StmtKind	.\tags	/^ReadK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	t	typeref:enum:__anon13	file:
StmtKind	.\tags	/^RepeatK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	t	typeref:enum:__anon12	file:
StmtKind	.\tags	/^StmtKind	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	t	typeref:enum:__anon3$/;"	t	typeref:enum:__anon14	file:
THEN	.\globals.h	/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
THEN	.\tags	/^END	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
THEN	.\tags	/^THEN	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
THEN	.\tags	/^UNTIL	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
THEN	.\tags	/^WRITE	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
TIMES	.\globals.h	/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$/;"	e	enum:__anon1
TIMES	.\tags	/^EQ	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
TIMES	.\tags	/^LPAREN	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
TIMES	.\tags	/^PLUS	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
TIMES	.\tags	/^SEMI	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
TIMES	.\tags	/^TIMES	.\\globals.h	\/^    ASSIGN, EQ, LT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREM, SEMI$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
TRUE	.\globals.h	14;"	d
TokenType	.\globals.h	/^} TokenType;$/;"	t	typeref:enum:__anon1
UNTIL	.\globals.h	/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
UNTIL	.\tags	/^END	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
UNTIL	.\tags	/^THEN	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
UNTIL	.\tags	/^UNTIL	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
UNTIL	.\tags	/^WRITE	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
Void	.\globals.h	/^typedef enum {Void, Interger, Boolean} ExpType;$/;"	e	enum:__anon5
Void	.\tags	/^ExpType	.\\globals.h	\/^typedef enum {Void, Interger, Boolean} ExpType;$\/;"	t	typeref:enum:__anon5$/;"	e	enum:__anon18	file:
Void	.\tags	/^Interger	.\\globals.h	\/^typedef enum {Void, Interger, Boolean} ExpType;$\/;"	e	enum:__anon5$/;"	e	enum:__anon17	file:
WRITE	.\globals.h	/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$/;"	e	enum:__anon1
WRITE	.\tags	/^END	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
WRITE	.\tags	/^THEN	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
WRITE	.\tags	/^UNTIL	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
WRITE	.\tags	/^WRITE	.\\globals.h	\/^    IF, THEN, ELSE, END, REPEAT, UNTIL, READ, WRITE,$\/;"	e	enum:__anon1$/;"	v	typeref:enum:
WriteK	.\globals.h	/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$/;"	e	enum:__anon3
WriteK	.\tags	/^ReadK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	e	enum:__anon13	file:
WriteK	.\tags	/^RepeatK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	e	enum:__anon12	file:
WriteK	.\tags	/^StmtKind	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	t	typeref:enum:__anon3$/;"	e	enum:__anon14	file:
_GLOBALS_H	.\globals.h	2;"	d
_SCAN_H	.\scan.h	2;"	d
_UTIL_H_	.\util.h	2;"	d
__anon20::exp	.\tags	/^treeNode::kind	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon6	access:public$/;"	m	struct:__anon20	file:	access:public
__anon20::stmt	.\tags	/^treeNode::kind	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon6	access:public$/;"	m	struct:__anon20	file:	access:public
__anon21::name	.\tags	/^treeNode::__anon7::op	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon21	file:	access:public
__anon21::op	.\tags	/^treeNode::__anon7::op	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon21	file:	access:public
__anon21::val	.\tags	/^treeNode::__anon7::op	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon21	file:	access:public
__anon22::name	.\tags	/^treeNode::__anon7::val	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon22	file:	access:public
__anon22::op	.\tags	/^treeNode::__anon7::val	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon22	file:	access:public
__anon22::val	.\tags	/^treeNode::__anon7::val	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon22	file:	access:public
__anon23::name	.\tags	/^treeNode::__anon7::name	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon23	file:	access:public
__anon23::op	.\tags	/^treeNode::__anon7::name	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon23	file:	access:public
__anon23::val	.\tags	/^treeNode::__anon7::name	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon23	file:	access:public
__anon24::name	.\tags	/^treeNode::attr	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon7	access:public$/;"	m	struct:__anon24	file:	access:public
__anon24::op	.\tags	/^treeNode::attr	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon7	access:public$/;"	m	struct:__anon24	file:	access:public
__anon24::val	.\tags	/^treeNode::attr	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon7	access:public$/;"	m	struct:__anon24	file:	access:public
__anon9::str	.\scan.c	/^    char *str;$/;"	m	struct:__anon9	file:	access:public
__anon9::tok	.\scan.c	/^    TokenType tok;$/;"	m	struct:__anon9	file:	access:public
attr	.\globals.h	/^    union {TokenType op; int val; char *name;} attr;$/;"	m	struct:treeNode	typeref:union:treeNode::__anon7	access:public
attr	.\tags	/^treeNode::attr	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon7	access:public$/;"	v	typeref:struct:__anon24
bufsize	.\scan.c	/^static int bufsize = 0;$/;"	v	file:
child	.\globals.h	/^    struct treeNode * child[MAXCHILDREN];$/;"	m	struct:treeNode	typeref:struct:treeNode::treeNode	access:public
copyString	.\util.c	/^char *copyString(char *s){$/;"	f	signature:(char *s)
copyString	.\util.h	/^char *copyString(char *);$/;"	p	signature:(char *)
exp	.\globals.h	/^    union {StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anon6	access:public
exp	.\tags	/^treeNode::__anon6::exp	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	m	struct:treeNode	file:	access:public
exp	.\tags	/^treeNode::__anon6::stmt	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	m	struct:treeNode::__anon19	file:	access:public
exp	.\tags	/^treeNode::kind	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon6	access:public$/;"	m	struct:__anon20	file:	access:public
format	.\tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
getNextChar	.\scan.c	/^static char getNextChar(void){$/;"	f	file:	signature:(void)
getToken	.\scan.h	/^TokenType getToken(void);$/;"	p	signature:(void)
ifK	.\globals.h	/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$/;"	e	enum:__anon3
ifK	.\tags	/^ReadK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	e	enum:__anon13	file:
ifK	.\tags	/^RepeatK	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	e	enum:__anon3$/;"	e	enum:__anon12	file:
ifK	.\tags	/^StmtKind	.\\globals.h	\/^typedef enum {ifK, RepeatK, AssignK, ReadK, WriteK} StmtKind;$\/;"	t	typeref:enum:__anon3$/;"	e	enum:__anon14	file:
kind	.\globals.h	/^    union {StmtKind stmt; ExpKind exp;} kind;$/;"	m	struct:treeNode	typeref:union:treeNode::__anon6	access:public
kind	.\tags	/^treeNode::__anon6::exp	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	t	typeref:struct:treeNode	file:
kind	.\tags	/^treeNode::__anon6::stmt	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	m	struct:treeNode	typeref:struct:treeNode::__anon19	file:	access:public
kind	.\tags	/^treeNode::kind	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon6	access:public$/;"	v	typeref:struct:__anon20
lineBuf	.\scan.c	/^static char lineBuf[BUFLEN];$/;"	v	file:
lineno	.\globals.h	/^    int lineno;$/;"	m	struct:treeNode	access:public
linepos	.\scan.c	/^static int linepos = 0;$/;"	v	file:
name	.\globals.h	/^    union {TokenType op; int val; char *name;} attr;$/;"	m	union:treeNode::__anon7	access:public
name	.\tags	/^treeNode::__anon7::name	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon23	file:	access:public
name	.\tags	/^treeNode::__anon7::op	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon21	file:	access:public
name	.\tags	/^treeNode::__anon7::val	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon22	file:	access:public
name	.\tags	/^treeNode::attr	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon7	access:public$/;"	m	struct:__anon24	file:	access:public
nodekind	.\globals.h	/^    NodeKind nodekind;$/;"	m	struct:treeNode	access:public
op	.\globals.h	/^    union {TokenType op; int val; char *name;} attr;$/;"	m	union:treeNode::__anon7	access:public
op	.\tags	/^treeNode::__anon7::name	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon23	file:	access:public
op	.\tags	/^treeNode::__anon7::op	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon21	file:	access:public
op	.\tags	/^treeNode::__anon7::val	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon22	file:	access:public
op	.\tags	/^treeNode::attr	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon7	access:public$/;"	m	struct:__anon24	file:	access:public
printToken	.\util.c	/^void printToken(TokenType token, const char *tokenString){$/;"	f	signature:(TokenType token, const char *tokenString)
printToken	.\util.h	/^void printToken(TokenType, const char *);$/;"	p	signature:(TokenType, const char *)
sibling	.\globals.h	/^    struct treeNode * sibling;$/;"	m	struct:treeNode	typeref:struct:treeNode::treeNode	access:public
stmt	.\globals.h	/^    union {StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anon6	access:public
stmt	.\tags	/^treeNode::__anon6::stmt	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	m	struct:treeNode::__anon19	file:	access:public
stmt	.\tags	/^treeNode::kind	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon6	access:public$/;"	m	struct:__anon20	file:	access:public
str	.\scan.c	/^    char *str;$/;"	m	struct:__anon9	file:	access:public
tok	.\scan.c	/^    TokenType tok;$/;"	m	struct:__anon9	file:	access:public
tokenString	.\scan.c	/^char tokenString[MAXTOKENLEN + 1];$/;"	v
treeNode	.\globals.h	/^typedef struct treeNode {$/;"	s
treeNode	.\tags	/^treeNode	.\\globals.h	\/^typedef struct treeNode {$\/;"	s$/;"	s	file:
treeNode::$	.\tags	/^treeNode	.\\globals.h	\/^typedef struct treeNode {$\/;"	s$/;"	m	struct:treeNode	file:	access:public
treeNode::$	.\tags	/^treeNode::__anon6::stmt	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	m	struct:treeNode	file:	access:public
treeNode::__anon19::exp	.\tags	/^treeNode::__anon6::stmt	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	m	struct:treeNode::__anon19	file:	access:public
treeNode::__anon19::stmt	.\tags	/^treeNode::__anon6::stmt	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	m	struct:treeNode::__anon19	file:	access:public
treeNode::__anon6::exp	.\globals.h	/^    union {StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anon6	access:public
treeNode::__anon6::stmt	.\globals.h	/^    union {StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anon6	access:public
treeNode::__anon7::name	.\globals.h	/^    union {TokenType op; int val; char *name;} attr;$/;"	m	union:treeNode::__anon7	access:public
treeNode::__anon7::op	.\globals.h	/^    union {TokenType op; int val; char *name;} attr;$/;"	m	union:treeNode::__anon7	access:public
treeNode::__anon7::val	.\globals.h	/^    union {TokenType op; int val; char *name;} attr;$/;"	m	union:treeNode::__anon7	access:public
treeNode::attr	.\globals.h	/^    union {TokenType op; int val; char *name;} attr;$/;"	m	struct:treeNode	typeref:union:treeNode::__anon7	access:public
treeNode::child	.\globals.h	/^    struct treeNode * child[MAXCHILDREN];$/;"	m	struct:treeNode	typeref:struct:treeNode::treeNode	access:public
treeNode::exp	.\tags	/^treeNode::__anon6::exp	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	m	struct:treeNode	file:	access:public
treeNode::kind	.\globals.h	/^    union {StmtKind stmt; ExpKind exp;} kind;$/;"	m	struct:treeNode	typeref:union:treeNode::__anon6	access:public
treeNode::kind	.\tags	/^treeNode::__anon6::stmt	.\\globals.h	\/^    union {StmtKind stmt; ExpKind exp;} kind;$\/;"	m	union:treeNode::__anon6	access:public$/;"	m	struct:treeNode	typeref:struct:treeNode::__anon19	file:	access:public
treeNode::lineno	.\globals.h	/^    int lineno;$/;"	m	struct:treeNode	access:public
treeNode::nodekind	.\globals.h	/^    NodeKind nodekind;$/;"	m	struct:treeNode	access:public
treeNode::sibling	.\globals.h	/^    struct treeNode * sibling;$/;"	m	struct:treeNode	typeref:struct:treeNode::treeNode	access:public
treeNode::type	.\globals.h	/^    ExpType type;  \/* for type checking of exps*\/$/;"	m	struct:treeNode	access:public
type	.\globals.h	/^    ExpType type;  \/* for type checking of exps*\/$/;"	m	struct:treeNode	access:public
ungetNextChar	.\scan.c	/^static void ungetNextChar(void){$/;"	f	file:	signature:(void)
val	.\globals.h	/^    union {TokenType op; int val; char *name;} attr;$/;"	m	union:treeNode::__anon7	access:public
val	.\tags	/^treeNode::__anon7::name	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon23	file:	access:public
val	.\tags	/^treeNode::__anon7::op	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon21	file:	access:public
val	.\tags	/^treeNode::__anon7::val	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	union:treeNode::__anon7	access:public$/;"	m	union:__anon22	file:	access:public
val	.\tags	/^treeNode::attr	.\\globals.h	\/^    union {TokenType op; int val; char *name;} attr;$\/;"	m	struct:treeNode	typeref:union:treeNode::__anon7	access:public$/;"	m	struct:__anon24	file:	access:public
